{{!< default}}
{{!-- 
/**
 * Uncertainty Project
 * Developed by Engagement Lab, 2016
 * ==============
 * 
 * Script include for global logic
 * ==========
 */
--}}

<script type="text/javascript">

	var currentprompt;
	var socket;
	var socketEvents;

	var promptId = "{{promptId}}";

	$(document).ready(function() {

		// All possible socket event IDs
	var eventIds = [
	
		'connect',
		'disconnect',

		'response:send', 
		'response:update'

		];


		var registerEvents = function() {
			$.each(eventIds, function(index, id) {
	      
	      socket.on(id, function(eventData) {
	            
	            socketEvents(id, eventData);

	            if(typeof(gameEvents) == "function")
	                gameEvents(id, eventData);

	        });

	    });
		};

		// Menu toggling
	  $("#menu-close").click(function(e) {
	    e.preventDefault();
	    $("#sidebar-wrapper").toggleClass("active");
	  });
	  $("#menu-toggle").click(function(e) {
	    e.preventDefault();
	    $("#sidebar-wrapper").toggleClass("active");
	  });



	  {{#ifeq section "index"}}

			  // set interval for 10 seconds
			  var promptinterval = setInterval(promptChange, 10000);

				function promptChange() {

					var prompts = $('.prompt-wrapper');
					_.each(prompts, function(prompt){
						$(prompt).hide;

					});
				}
				function abortTimer() { // to be called when you want to stop the timer
				  clearInterval(tid);
				}
		
		{{/ifeq}}



		{{#ifeq section "create"}}

				var index = 0;

				// // Start the session immediately
				// $.post( 
			 //  	"/api/response/",
				// 	{ promptId: 'TEST' },
				// 	function( data ) {
				// 		data.promptId = 'TEST';

				// 		if(data.error_code !== undefined) {

				// 			// if(data.error_code === 'need_content')
				// 				// $('#session-create #categories').addClass('invalid');
							
				// 			$('#session-create .error').text(data.msg).fadeIn();
							
				// 			return;
				// 		}
				// 	  window.location = data;
				// 	  // socket.emit("game:start", 'TEST');

				// 	});

				$('.icon-feed').width($('.icon:not(.item)').length * 110 + 'px');


				$('#toggle').change(function() {
					toggleInput();
				});

				// Switch input type
				// function toggleInput() {
				//     var x = document.getElementById("toggle");
				//     var i = x.selectedIndex;

				//     if (x.options[i].text == "Text") {
				//     	$('.draw-input').hide();
				//     	$('.text-input').show();

				//     } else if (x.options[i].text == "Draw") {
				//     	$('.text-input').hide();
				//     	$('.draw-input').show(function() {
				//     		// Make canvas editable
				//     		var canvas = $('#sketch');
				// 	      // paper.js
				// 				paper.install(window);
				// 				paper.setup(canvas);
				// 				// Create a simple drawing tool:
				// 				function onMouseDown(event) {
				// 					console.log('You pressed the mouse!');
				// 				}

				// 				function onMouseDrag(event) {
				// 					console.log('You dragged the mouse!');
				// 				}

				// 				function onMouseUp(event) {
				// 					console.log('You released the mouse!');
				// 				}

				//     	});
				    	
				//     }
				// }

	      // Take Text Area Input
				$('#prompt-input').keypress(function(e) {

	          // Enter pressed?
	          if(e.which == 10 || e.which == 13) {
	              sendResponse($(this)[0].value, 'text');
	          }

	      });

	      // Grab Icon
	      $('.icon:not(.item)').click(function(){

	      	console.log($(this).find('img').attr('src'));

	      	sendResponse($(this).find('img').attr('src'), 'icon');

	      });

	      // Send Response Input 
	      function sendResponse(item, type) {

	      	if (type == 'text'){
	      		console.log(item, "is the text");

	      		var html = '<div class="item text col-sm-3"><p>' + item + '</p></div>';

		      	$('#response-group').append(html);

	      	} else if (type == 'icon') {

	      		var html = '<div class="item icon col-sm-3"><img src="' + item + '"/></div>';

		      	$('#response-group').append(html);

	      	}

	      	

	      	//TO DO: Add to prompt in keystone

	      	// var data = { 
	      	// 	promptId: promptId, 
	      	// 	response: text
	      	// }

	      	// socket.emit('response:send', { promptId: 'TEST', data:data } );

	      }
		
		{{/ifeq}}





// TODO

		// SOCKET EVENTS 

		// Open Socket connection
		socket = io('//{{host}}', {
		 	path: '/creating-boston', 
		 	reconnection: true,
		 	'reconnectionDelay': 500,
		 	'maxReconnectionAttempts':Infinity
		 });

    registerEvents();

    socketEvents = function(eventId, eventData) {
	    
	    switch (eventId) {

	        case 'connect':

		        console.log('connected');

		        break;

	        case 'response:update':

		        console.log('response going up', eventData);

		        break;

      }

    };

	});
	
</script>